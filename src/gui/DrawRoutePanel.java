/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import utils.Airport;
import utils.Coordinate;
import utils.WayPoint;

/**
 *
 * @author migue
 */
public class DrawRoutePanel extends javax.swing.JPanel {

    private BufferedImage icon = null;
    private Image bg, bg0, bg1, bg2, bg3;
    private Coordinate position;
    private WayPoint[] wp;
    double course = 0;
    ArrayList<Double> latList = new ArrayList<Double>();
    ArrayList<Double> lonList = new ArrayList<Double>();

    double latNorth;
    double latSouth;
    double lonWest;
    double lonEast;

    // size
    double sizeEW;
    double sizeNS;

    public DrawRoutePanel(String file) {
        try {
            this.bg0 = ImageIO.read(new File("src/resources/map0.png"));
            this.bg1 = ImageIO.read(new File("src/resources/map1.png"));
            this.bg2 = ImageIO.read(new File("src/resources/map2.png"));
        } catch (IOException ex) {
            Logger.getLogger(DrawRoutePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        try {
            icon = ImageIO.read(new File(file));
        } catch (IOException ex) {
            Logger.getLogger(DrawRoutePanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setPosition(Coordinate pos) {
        this.position = pos;
    }

    public void setCourse(double course) {
        this.course = course;
    }

    public void setWp(WayPoint[] wp) {
        this.wp = wp;
    }

    public void updateList(ArrayList<Double> latList, ArrayList<Double> lonList) {
        this.latList = latList;
        this.lonList = lonList;
    }

    public void setZoom(int z) { //3 niveles de zoom, aunque en este caso solo se usarán 2
        switch (z) {
            case 0:
                latNorth = 39.54131;
                latSouth = 39.2;
                lonWest = -0.54336;
                lonEast = -0.13721;
                bg = bg0;
                break;
            case 1:
                latNorth = 39.7;
                latSouth = 38.5449;
                lonWest = -0.7035;
                lonEast = 0.8;
                bg = bg1;
                break;
            case 2:
                latNorth = 40.2975;
                latSouth = 37.45;
                lonWest = -1.3;
                lonEast = 2.4;
                bg = bg2;
                break;
        }
        // size
        sizeEW = lonEast - lonWest;
        sizeNS = latNorth - latSouth;

    }

    private int getY(double lat) { //paso de lat a coord y de dibujo con Mercator

        double latR = Math.toRadians(lat);

        double ymin = mercY(Math.toRadians(latSouth));
        double ymax = mercY(Math.toRadians(latNorth));
        double yFactor = this.getHeight() / (ymax - ymin);
        double y = (ymax - mercY(latR)) * yFactor;
        return (int) Math.round(y);
    }

    private double mercY(double lat) { // Proyección de Mercator
        return Math.log(Math.tan(lat / 2 + Math.PI / 4));
    }

    private int getX(double lon) { //paso de lon a coord x de dibujo
        int x = (int) Math.round(this.getWidth() * (lon - lonWest) / sizeEW);
        return x;
    }

    private void paintAirplane(Graphics2D g2, Coordinate position) { //Dibujar avión
        AffineTransform at = new AffineTransform();
        // 3. transladar
        at.translate(getX(position.getLongitude()),
                getY(position.getLatitude()));
        // 2. realizar la rotación
        at.rotate(Math.PI * course / 180.0);
        // 1. transladar al centro
        at.translate(-icon.getWidth() / 2, -icon.getHeight() / 2);
        g2.drawImage(icon, at, null);
    }

    private void paintTag(Graphics2D g2, Coordinate position, Color color) { //Dubjar código
        g2.setColor(color);
        int y = getY(position.getLatitude());
        int x = getX(position.getLongitude());

        Line2D linea1 = new Line2D.Double(x, y, x + 9, y - 9);
        g2.draw(linea1);
        g2.drawString(position.getLocationName(), x + 9, y - 9);
    }

    private void paintWP(Graphics2D g2, WayPoint wp, Color color) { //Dibuja WP
        g2.setColor(color);
        int yA = getY(wp.getLatitude());
        int xA = getX(wp.getLongitude());

        g2.fillOval(xA - 3, yA - 3, 6, 6);

        if (yA > 20 || !bg.equals(bg3)) {
            g2.drawString(wp.getLocationName(), xA + 7, yA - 7);
        } else { //Para los casos en los que el codigo del WP se queda fuera
            g2.drawString(wp.getLocationName(), xA + 7, 20);
        }
    }

    public void paintTrace(Graphics2D g2, Color color) { //Dibuja traza del avión con la lista de puntos como rectas entre ellos

        if (latList != null && latList.size() > 1) {
            g2.setColor(color);
            for (int i = 0; i < latList.size() - 1; i++) {

                g2.draw(new Line2D.Double(getX(lonList.get(i)), getY(latList.get(i)),
                        getX(lonList.get(i + 1)), getY(latList.get(i + 1))));
            }

        }
    }

    public void paintBackground(Graphics2D g2) {
        g2.drawImage(bg, 0, 0, getWidth(), getHeight(), this);
    }

    @Override
    protected void paintComponent(Graphics g) {

        super.paintComponent(g);
        
        Graphics2D g2 = (Graphics2D) g;

        paintBackground(g2);

        paintTrace(g2, Color.orange);

        if (position != null) {

            paintAirplane(g2, position);
            paintTag(g2, position, Color.orange);
        }

        if (wp != null) {

            for (WayPoint wp1 : wp) {
                paintWP(g2, wp1, Color.white);
            }

        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
